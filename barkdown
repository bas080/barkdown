#!/usr/bin/env bash

# author:  Bas Huis
# website: https://github.com/bas080/barkdown
# created: Sat Mar 14 06:54:17 CET 2020
# changed: Sat Mar 14 06:46:01 CET 2020
# license: GNU General Public License 3.0

# set -eo pipefail

file="$1"
opens=""

[ -z "${file:-}" ] && {
  >&2 echo './README.bd > ./README.md'
  ./README.bd > ./README.md
  exit
}

[ -x "$file" ] && [ -z "${BARKDOWN:-}" ] && {
  export BARKDOWN="called"
  $0 <(tail -n +3 < "$file")
  exit
}

backtick='`'
emptystring=''

eval_line() {
  while read -r _ command; do
    command="${command/$backtick/$emptystring}"
    # shellcheck disable=SC2016

    printf '$ %s\n%s\n' "$command" "$(eval "$command")"
  done <<< "$1"
}

while IFS='' read -r line; do
  [[ "$line" == '`$'* ]] && {
    printf '```\n'
    eval_line "$line"
    printf '```\n'
    continue
  }

  [[ ! -z "$opens" ]] && [[ "$line" == '$ '* ]] && {
    eval_line "$line"
    continue
  }

  # Should only work for bash and sh scripts. Considering filtering that here.
  [[ "$line" == '```'* ]] && {
    if [ -z "$opens" ]; then
      opens="$line"
    else
      opens=""
    fi
  }

  echo "$line"
done < "$file"
